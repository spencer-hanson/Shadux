#!/bin/bash

# The instructions in this file are extracted from
# 'Linux From Scratch 7.1' (SVN-20120211 / r9742).
#
# Linux From Scratch is released under the MIT license.
# Copyright (C) 1999-2012, Gerard Beekmans

RESUMEBACKUP="4"
BUILDBEYOND="9"
LASTFUNCTION="10"
BUILDUSER="lfs"
ROOTVARIABLE="LFS"
EXTERNAL_FOLDERS="/tools"
CONTAINS="autoconf automake bash binutils bison bootscripts bzip2 check
          coreutils dejagnu diffutils e2fsprogs expect file findutils flex gawk
          gcc gdbm gettext glibc gmp grep groff grub gzip iana-etc inetutils
          iproute2 kbd kernel kmod less libpipeline libtool linux-headers m4
          make man-db man-pages mpc mpfr ncurses patch perl procps psmisc
          readline sed shadow sysklogd sysvinit tar tcl texinfo udev util-linux
          vim xz zlib"

# Note: This script is devided in several functions. Each function represents
#       the scope of a shell. Whenever the shell environment changes (because
#       of a 'su', 'source' or 'exec' command for example), LFScript will
#       automatically transfer control to the next function.

##############################
buildbase1() { # SHELL SCOPE #
##############################

# --------------------------------- #
# Creating the $LFS/tools Directory #
# --------------------------------- #

mkdir -v $LFS/tools

ln -sv $LFS/tools /

# ------------------- #
# Adding the LFS User #
# ------------------- #

groupadd lfs
useradd -s /bin/bash -g lfs -m -k /dev/null lfs

passwd lfs

chown -v lfs $LFS/tools

chown -v lfs $LFS/sources

su - lfs

#################################
}; buildbase2() { # SHELL SCOPE #
#################################

# -------------------------- #
# Setting Up the Environment #
# -------------------------- #

cat > ~/.bash_profile << "EOF"
exec env -i HOME=$HOME TERM=$TERM PS1='\u:\w\$ ' /bin/bash
EOF

cat > ~/.bashrc << "EOF"
set +h
umask 022
LFS=/mnt/lfs
LC_ALL=POSIX
LFS_TGT=$(uname -m)-lfs-linux-gnu
PATH=/tools/bin:/bin:/usr/bin
export LFS LC_ALL LFS_TGT PATH
EOF

source ~/.bash_profile

#################################
}; buildbase3() { # SHELL SCOPE #
#################################

# (Compiling packages) #

BUILD binutils
BUILD gcc
BUILD linux-headers
BUILD glibc

# ----------------------- #
# Adjusting the Toolchain #
# ----------------------- #

SPECS=`dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/specs
$LFS_TGT-gcc -dumpspecs | sed \
  -e 's@/lib\(64\)\?/ld@/tools&@g' \
  -e "/^\*cpp:$/{n;s,$, -isystem /tools/include,}" > $SPECS 
echo "New specs file is: $SPECS"
unset SPECS

echo 'main(){}' > dummy.c
$LFS_TGT-gcc -B/tools/lib dummy.c
readelf -l a.out | grep ': /tools'

rm -v dummy.c a.out

# (Compiling packages) #

BUILD binutils
BUILD gcc
BUILD tcl
BUILD expect
BUILD dejagnu
BUILD check
BUILD ncurses
BUILD bash
BUILD bzip2
BUILD coreutils
BUILD diffutils
BUILD file
BUILD findutils
BUILD gawk
BUILD gettext
BUILD grep
BUILD gzip
BUILD m4
BUILD make
BUILD patch
BUILD perl
BUILD sed
BUILD tar
BUILD texinfo
BUILD xz

# --------- #
# Stripping #
# --------- #

strip --strip-debug /tools/lib/*
strip --strip-unneeded /tools/{,s}bin/*

rm -rf /tools/{,share}/{info,man,doc}

#################################
}; buildbase4() { # SHELL SCOPE #
#################################

# ------------------ #
# Changing Ownership #
# ------------------ #

chown -R root:root $LFS/tools

# ------------------------------------- #
# Preparing Virtual Kernel File Systems #
# ------------------------------------- #

mkdir -v $LFS/{dev,proc,sys}

mknod -m 600 $LFS/dev/console c 5 1
mknod -m 666 $LFS/dev/null c 1 3

mount -v --bind /dev $LFS/dev

mount -vt devpts devpts $LFS/dev/pts
mount -vt tmpfs shm $LFS/dev/shm
mount -vt proc proc $LFS/proc
mount -vt sysfs sysfs $LFS/sys

# ------------------------------- #
# Entering the Chroot Environment #
# ------------------------------- #

chroot "$LFS" /tools/bin/env -i \
    HOME=/root TERM="$TERM" PS1='\u:\w\$ ' \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin \
    /tools/bin/bash --login +h

#################################
}; buildbase5() { # SHELL SCOPE #
#################################

# -------------------- #
# Creating Directories #
# -------------------- #

mkdir -pv /{bin,boot,etc/{opt,sysconfig},home,lib,mnt,opt,run}
mkdir -pv /{media/{floppy,cdrom},sbin,srv,var}
install -dv -m 0750 /root
install -dv -m 1777 /tmp /var/tmp
mkdir -pv /usr/{,local/}{bin,include,lib,sbin,src}
mkdir -pv /usr/{,local/}share/{doc,info,locale,man}
mkdir -v  /usr/{,local/}share/{misc,terminfo,zoneinfo}
mkdir -pv /usr/{,local/}share/man/man{1..8}
for dir in /usr /usr/local; do
  ln -sv share/{man,doc,info} $dir
done
case $(uname -m) in
 x86_64) ln -sv lib /lib64 && ln -sv lib /usr/lib64 ;;
esac
mkdir -v /var/{log,mail,spool}
ln -sv /run /var/run
ln -sv /run/lock /var/lock
mkdir -pv /var/{opt,cache,lib/{misc,locate},local}

# ------------------------------------- #
# Creating Essential Files and Symlinks #
# ------------------------------------- #

ln -sv /tools/bin/{bash,cat,echo,pwd,stty} /bin
ln -sv /tools/bin/perl /usr/bin
ln -sv /tools/lib/libgcc_s.so{,.1} /usr/lib
ln -sv /tools/lib/libstdc++.so{,.6} /usr/lib
sed 's/tools/usr/' /tools/lib/libstdc++.la > /usr/lib/libstdc++.la
ln -sv bash /bin/sh

touch /etc/mtab

cat > /etc/passwd << "EOF"
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/dev/null:/bin/false
nobody:x:99:99:Unprivileged User:/dev/null:/bin/false
EOF

cat > /etc/group << "EOF"
root:x:0:
bin:x:1:
sys:x:2:
kmem:x:3:
tty:x:4:
tape:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
mail:x:34:
nogroup:x:99:
EOF

exec /tools/bin/bash --login +h

#################################
}; buildbase6() { # SHELL SCOPE #
#################################

touch /var/run/utmp /var/log/{btmp,lastlog,wtmp}
chgrp -v utmp /var/run/utmp /var/log/lastlog
chmod -v 664 /var/run/utmp /var/log/lastlog
chmod -v 660 /var/log/btmp

# (Compiling packages) #

BUILD linux-headers
BUILD man-pages
BUILD glibc

# -------------------------- #
# Re-adjusting the Toolchain #
# -------------------------- #

mv -v /tools/bin/{ld,ld-old}
mv -v /tools/$(gcc -dumpmachine)/bin/{ld,ld-old}
mv -v /tools/bin/{ld-new,ld}
ln -sv /tools/bin/ld /tools/$(gcc -dumpmachine)/bin/ld

gcc -dumpspecs | sed -e 's@/tools@@g' \
    -e '/\*startfile_prefix_spec:/{n;s@.*@/usr/lib/ @}' \
    -e '/\*cpp:/{n;s@$@ -isystem /usr/include@}' > \
    `dirname $(gcc --print-libgcc-file-name)`/specs

echo 'main(){}' > dummy.c
cc dummy.c -v -Wl,--verbose &> dummy.log
readelf -l a.out | grep ': /lib'

grep -o '/usr/lib.*/crt[1in].*succeeded' dummy.log

grep -B1 '^ /usr/include' dummy.log

grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'

grep "/lib.*/libc.so.6 " dummy.log

grep found dummy.log

rm -v dummy.c a.out dummy.log

# (Compiling packages) #

BUILD zlib
BUILD file
BUILD binutils
BUILD gmp
BUILD mpfr
BUILD mpc
BUILD gcc
BUILD sed
BUILD bzip2
BUILD ncurses
BUILD util-linux
BUILD psmisc
BUILD e2fsprogs
BUILD coreutils
BUILD iana-etc
BUILD m4
BUILD bison
BUILD procps
BUILD grep
BUILD readline
BUILD bash

# (Refresh bash)

exec /bin/bash --login +h

#################################
}; buildbase7() { # SHELL SCOPE #
#################################

# (Compiling packages) #

BUILD libtool
BUILD gdbm
BUILD inetutils
BUILD perl
BUILD autoconf
BUILD automake
BUILD diffutils
BUILD gawk
BUILD findutils
BUILD flex
BUILD gettext
BUILD groff
BUILD xz
BUILD grub
BUILD gzip
BUILD iproute2
BUILD kbd
BUILD kmod
BUILD less
BUILD libpipeline
BUILD make
BUILD man-db
BUILD patch
BUILD shadow
BUILD sysklogd
BUILD sysvinit
BUILD tar
BUILD texinfo
BUILD udev
BUILD vim

#################################
}; buildbase8() { # SHELL SCOPE #
#################################

# ----------- #
# Cleaning Up #
# ----------- #

chroot "$LFS" /usr/bin/env -i \
    HOME=/root TERM="$TERM" PS1='\u:\w\$ ' \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin \
    /bin/bash --login

#################################
}; buildbase9() { # SHELL SCOPE #
#################################

# (Compiling packages) #

BUILD bootscripts
BUILD kernel

# ------- #
# The End #
# ------- #

echo SVN-20120211 > /etc/lfs-release

##################################
}; buildbase10() { # SHELL SCOPE #
##################################

# -------------------- #
# Rebooting the System #
# -------------------- #

umount -v $LFS/dev/pts
umount -v $LFS/dev/shm
umount -v $LFS/dev
umount -v $LFS/proc
umount -v $LFS/sys

#################
} # END OF FILE #
#################

